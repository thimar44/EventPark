@model EventPark.Models.EvenementViewModel


@using (Html.BeginForm("Create", "Evenement", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="backToList">
        <a class="btn btn-link" href="@Url.Action("Index", "Evenement")">
            <i class="fa fa-chevron-left "> Retour à la liste</i>
        </a>
    </div>
    <div class="jumbotron jumbotron-fluid rounded">
        <div class="form-horizontal">
            <h4>Nouvel événement</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.Titre, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Titre, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Titre, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Theme, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Theme, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Theme, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DateDebut, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DateDebut, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DateDebut, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.DateFin, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DateFin, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.DateFin, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.LibelleAdresse, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LibelleAdresse, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LibelleAdresse, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Adresse, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10 autocomplete">
                    <input id="addresse" type="text" name="addresse" onkeyup="getGeoCode()" class="form-control">
                    <div class="choiceDiv">
                        <ul class="choiceUl"></ul>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-10">
                    <input id="lat" type="hidden" name="lat" class="form-control">
                    <input id="lng" type="hidden" name="lng" class="form-control">
                </div>
            </div>

            <div class="col-md-12">
                <script>
                    var coordinateSelected;
                    var latSelected;
                    var lngSelected;

                    function getGeoCode() {
                        var userInput = $("input#addresse").val();
                        $.getJSON({
                            url: 'https://maps.googleapis.com/maps/api/geocode/json',
                            data: {
                                key: "AIzaSyAXEJ9Kcn0hWuIFxXRK6E5QwjMjb9_n9Ew",
                                address: userInput
                            },
                            success: function (data, textStatus) {
                                $(".choiceUl").empty();
                                var idChoice = 0;
                                for (result in data.results) {
                                    $(".choiceUl").append('<li id=choice' + idChoice
                                        + ' class="choiceLi" lat=' + data.results[result].geometry.location.lat
                                        + ' lng=' + data.results[result].geometry.location.lng
                                        + ' onClick="clickOnChoice(' + idChoice + ')">'
                                        + data.results[result].formatted_address + '</li>');
                                    idChoice = idChoice + 1;
                                };
                            }
                        });
                    };

                    function clickOnChoice(idChoice) {
                        var elementSelected = $("#choice" + idChoice);
                        $("#addressInput").val(elementSelected.text());
                        latSelected = elementSelected.attr("lat");
                        lngSelected = elementSelected.attr("lng");
                        coordinateSelected = new google.maps.LatLng(latSelected, lngSelected);
                        $(".choiceUl").empty();
                        $("#lat").val(latSelected);
                        $("#lng").val(lngSelected);
                    }

                </script>
                <script async defer
                        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAXEJ9Kcn0hWuIFxXRK6E5QwjMjb9_n9Ew">
                </script>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Images, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Images, "", new { @type = "file", @multiple = "multiple", @onchange = "preview(files)" })
                    @Html.ValidationMessageFor(model => model.Images, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-10" id="previewImg">
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Descrition, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Descrition, new { htmlAttributes = new { @class = "form-control" }, rows = "6", cols = "60" })
                    @Html.ValidationMessageFor(model => model.Descrition, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Tarif, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Tarif, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Tarif, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
